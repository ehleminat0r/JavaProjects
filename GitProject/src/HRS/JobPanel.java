/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HRS;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lhassler
 */
public class JobPanel extends javax.swing.JPanel {
    
   

    /**
     * Creates new form NewJPanel
     */
    public JobPanel() {
        initComponents();
        String[] dogs = new String[HRS.hrs.getmDogs().size()];
        for (int i=0;i<HRS.hrs.getmDogs().size();i++)
        {
            dogs[i] = HRS.hrs.getmDogs().get(i).getName();
        }
        jComboBoxDog.setModel(new javax.swing.DefaultComboBoxModel<>(dogs));
        
        String[] rooms = new String[HRS.hrs.getmRoom().size()];
        for (int i=0;i<HRS.hrs.getmRoom().size();i++)
        {
            rooms[i] = HRS.hrs.getmRoom().get(i).getmName();
        }
        jComboBoxRoom.setModel(new javax.swing.DefaultComboBoxModel<>(rooms));
        
        String[] dates = new String[] {"Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"};
        jComboBoxDate.setModel(new javax.swing.DefaultComboBoxModel<>(dates));
        
        UpdateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxRoom = new javax.swing.JComboBox<>();
        jComboBoxDog = new javax.swing.JComboBox<>();
        jComboBoxDate = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum", "Hund", "Zimmer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Hinzuf√ºgen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Datum");

        jLabel2.setText("Hund");

        jLabel3.setText("Zimmer");

        jComboBoxRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxDog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxRoom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDog, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxDog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DateFormat df = new SimpleDateFormat("dd");
        Date date;
        Calendar cal = Calendar.getInstance();
        if (jComboBoxDate.getSelectedItem().equals("Montag"))
        {
            try {
                cal.setTime(df.parse("01"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Dienstag"))
        {
            try {
                cal.setTime(df.parse("02"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Mittwoch"))
        {
            try {
                cal.setTime(df.parse("03"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Donnerstag"))
        {
            try {
                cal.setTime(df.parse("04"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Freitag"))
        {
            try {
                cal.setTime(df.parse("05"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Samstag"))
        {
            try {
                cal.setTime(df.parse("06"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBoxDate.getSelectedItem().equals("Sonntag"))
        {
            try {
                cal.setTime(df.parse("07"));
            } catch (ParseException ex) {
                Logger.getLogger(JobPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        Dog jobDog = null;
        for (Dog dog : HRS.hrs.getmDogs()) {
            if (dog.getName().equals(jComboBoxDog.getSelectedItem()))
            {
                jobDog = dog;
                break;
            }
        }
        Room jobRoom = null;
        for (Room room : HRS.hrs.getmRoom()) {
            if (room.getmName().equals(jComboBoxRoom.getSelectedItem()))
            {
                jobRoom = room;
                break;
            }
        }
        HRS.hrs.getJobs().add(new Job(cal, jobDog, jobRoom));
        UpdateTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateTable() {
        DateFormat df = new SimpleDateFormat("dd");
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (Job job : HRS.hrs.getJobs()) {
            String tag = "";
            if (df.format(job.getDate().getTime()).equals("01"))
            {
                tag = "Montag";
            }
            else if (df.format(job.getDate().getTime()).equals("02"))
            {
                tag = "Dienstag";
            }
            else if (df.format(job.getDate().getTime()).equals("03"))
            {
                tag = "Mittwoch";
            }
            else if (df.format(job.getDate().getTime()).equals("04"))
            {
                tag = "Donnerstag";
            }
            else if (df.format(job.getDate().getTime()).equals("05"))
            {
                tag = "Freitag";
            }
            else if (df.format(job.getDate().getTime()).equals("06"))
            {
                tag = "Samstag";
            }
            else if (df.format(job.getDate().getTime()).equals("07"))
            {
                tag = "Sonntag";
            }
            model.addRow(new Object[]{tag, job.getDog().getName(), job.getRoom().getmName()});
        }
        
        
        // TODO add your handling code here:
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxDate;
    private javax.swing.JComboBox<String> jComboBoxDog;
    private javax.swing.JComboBox<String> jComboBoxRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
