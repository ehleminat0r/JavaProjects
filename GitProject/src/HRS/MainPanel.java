/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HRS;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lhassler
 */
public class MainPanel extends javax.swing.JPanel {
    
    

    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAddDog = new javax.swing.JButton();
        jButtonAddOwner = new javax.swing.JButton();
        jButtonAddRoom = new javax.swing.JButton();
        jButtonAddJob = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jButtonAddDog.setText("Add Dog");
        jButtonAddDog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDogActionPerformed(evt);
            }
        });

        jButtonAddOwner.setText("Add Owner");
        jButtonAddOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddOwnerActionPerformed(evt);
            }
        });

        jButtonAddRoom.setText("Add Room");
        jButtonAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRoomActionPerformed(evt);
            }
        });

        jButtonAddJob.setText("Add Job");
        jButtonAddJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddJobActionPerformed(evt);
            }
        });

        jButton1.setText("refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddOwner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddDog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddJob)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddOwner)
                    .addComponent(jButtonAddDog)
                    .addComponent(jButtonAddRoom)
                    .addComponent(jButtonAddJob)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddOwnerActionPerformed
        // TODO add your handling code here:
        JFrame AddOwnerFrame = new JFrame();
        AddOwnerFrame.setSize(310, 476);
        AddOwnerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        AddOwnerFrame.setResizable(false);
        AddOwnerFrame.setLocationByPlatform(true);
        AddOwnerFrame.setVisible(true);
        AddOwnerFrame.setLayout(null); 
        OwnerPanel mOwnerPanel = new OwnerPanel();
        mOwnerPanel.setSize(302, 456);
        AddOwnerFrame.add(mOwnerPanel);
    }//GEN-LAST:event_jButtonAddOwnerActionPerformed

    private void jButtonAddDogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDogActionPerformed
        // TODO add your handling code here:
        JFrame AddDogFrame = new JFrame();
        AddDogFrame.setSize(310, 476);
        AddDogFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        AddDogFrame.setResizable(false);
        AddDogFrame.setLocationByPlatform(true);
        AddDogFrame.setVisible(true);
        AddDogFrame.setLayout(null); 
        DogPanel mDogPanel = new DogPanel();
        mDogPanel.setSize(302, 456);
        AddDogFrame.add(mDogPanel);
        
    }//GEN-LAST:event_jButtonAddDogActionPerformed

    private void jButtonAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRoomActionPerformed
        // TODO add your handling code here:
        JFrame AddRoomFrame = new JFrame();
        AddRoomFrame.setSize(310, 476);
        AddRoomFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        AddRoomFrame.setResizable(false);
        AddRoomFrame.setLocationByPlatform(true);
        AddRoomFrame.setVisible(true);
        AddRoomFrame.setLayout(null); 
        RoomPanel mRoomPanel = new RoomPanel();
        mRoomPanel.setSize(302, 456);
        AddRoomFrame.add(mRoomPanel);
    }//GEN-LAST:event_jButtonAddRoomActionPerformed

    private void jButtonAddJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddJobActionPerformed
        // TODO add your handling code here:
        JFrame AddJobFrame = new JFrame();
        AddJobFrame.setSize(310, 476);
        AddJobFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        AddJobFrame.setResizable(false);
        AddJobFrame.setLocationByPlatform(true);
        AddJobFrame.setVisible(true);
        AddJobFrame.setLayout(null); 
        JobPanel mJobPanel = new JobPanel();
        mJobPanel.setSize(302, 456);
        AddJobFrame.add(mJobPanel);
    }//GEN-LAST:event_jButtonAddJobActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DateFormat df = new SimpleDateFormat("dd");
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        List<String> zimmer = new ArrayList<String>();
        for (Room room : HRS.hrs.getmRoom()) {
            zimmer.add(room.getmName());
        }
        
        String[] mon = new String[zimmer.size()];
        String[] die = new String[zimmer.size()];
        String[] mit = new String[zimmer.size()];
        String[] don = new String[zimmer.size()];
        String[] fre = new String[zimmer.size()];
        String[] sam = new String[zimmer.size()];
        String[] son = new String[zimmer.size()];
        

        for (int i=0; i<zimmer.size(); i++)
        {
            for (Job job : HRS.hrs.getJobs())
            {
                System.out.println(df.format(job.getDate().getTime()));
                if (df.format(job.getDate().getTime()).equals("01") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    mon[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("02") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    die[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("03") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    mit[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("04") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    don[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("05") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    fre[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("06") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    sam[i] = job.getDog().getName();
                }
                
                if (df.format(job.getDate().getTime()).equals("07") && job.getRoom().getmName().equals(zimmer.get(i)))
                {
                    son[i] = job.getDog().getName();
                }
            }
            
            model.addRow(new Object[]{zimmer.get(i), mon[i], die[i], mit[i], don[i], fre[i], sam[i], son[i]});
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddDog;
    private javax.swing.JButton jButtonAddJob;
    private javax.swing.JButton jButtonAddOwner;
    private javax.swing.JButton jButtonAddRoom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
